unit UserReferForm;

interface

uses
    Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms, Dialogs,
    KiiMessages, ExtCtrls, Buttons, StdCtrls, BaseCan, BaseCounter;

type
    TfrmUserRefer = class(TForm)
        Panel1: TPanel;
        lbList: TListBox;
        pnlDock: TPanel;
        Panel4: TPanel;
        sbtnsave: TSpeedButton;
        Panel18: TPanel;
        sbtnClose: TSpeedButton;
        procedure FormClose(Sender: TObject; var Action: TCloseAction);
        procedure FormCloseQuery(Sender: TObject; var CanClose: Boolean);
        procedure FormCreate(Sender: TObject);
        procedure FormDestroy(Sender: TObject);
        procedure FormShow(Sender: TObject);
        procedure sbtnsaveClick(Sender: TObject);
        procedure sbtnCloseClick(Sender: TObject);
        procedure lbListClick(Sender: TObject);
        procedure lbListDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
        procedure pnlTitleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
    private
        procedure HVCtrlChange(Sender: TObject);
    { Private declarations }
    public
    { Public declarations }
        mLastIDx: integer;
        mfrm: HWND;
        procedure Initial;
        procedure ReadMessage(var myMsg: TMessage); message WM_SYS_CODE;
        procedure OnUserEditChanged(Sender: TObject; AStatus: integer);
    end;

var
    frmUserRefer: TfrmUserRefer;

implementation

uses
    DataUnit, myUtils, Log, ReferenceForm, ComsForm, LanSetupForm,
    Global, CanCtrlForm, SeatType, ModelType, IODef, CanOperForm, PowerSupplyForm, ADCheckForm,
    DioForm, LanIoUnit, ReferBaseForm, SeatMotorType,
    TsWorkUnit, HVTester, TechSupportForm, BaseAD, LangTran;


{$R *.dfm}

procedure TfrmUserRefer.FormClose(Sender: TObject; var Action: TCloseAction);
begin
    Action := CaFree;
    frmUserRefer := nil;


end;

procedure TfrmUserRefer.FormCloseQuery(Sender: TObject; var CanClose: Boolean);
begin
    SendMessage(mfrm, WM_CLOSE, 0, 0);
end;

procedure TfrmUserRefer.FormCreate(Sender: TObject);
begin
    with lbList do
    begin
        ItemHeight := 70;
        Items.Add(_TR('시험 설정'));
        Items.Add(_TR('PLC 연결설정'));
        Items.Add(_TR('파워 서플라이'));
        Items.Add(_TR('A/D 입력확인'));
        Items.Add(_TR('DI/O 확인(DIO)'));
        Items.Add(_TR('DI/O 확인(LAN)'));
        Items.Add(_TR('ECU 버전 리스트'));
    end;

    mLastIDx := 0;
    mfrm := 0;

end;

procedure TfrmUserRefer.FormDestroy(Sender: TObject);
begin
//
end;

procedure TfrmUserRefer.FormShow(Sender: TObject);
begin
    Initial;
    TLangTran.ChangeCaption(self);
end;

procedure TfrmUserRefer.Initial;
begin
    SendMessage(mfrm, WM_CLOSE, 0, 0);

    mLastIDx := -1;
    lbList.ItemIndex := 0;
    lbListClick(lbList);
end;

type
    TMetaForm = class of TForm;


//    TfrmReferItem = (riOP, riComm, riMotor, riSoundProof, riBackAngle, riElec, riBuckle, riIMSLimit, riIMSMem, riAntipinch, riMnlSlide, riMnlHeight);

procedure TfrmUserRefer.lbListClick(Sender: TObject);
var
    nF: TForm;
    i: integer;
    TsWork: TTsWork;
begin
    if mLastIDx <> lbList.ItemIndex then
    begin
        sbtnsave.Visible := false;
        SendMessage(mfrm, WM_CLOSE, 0, 0);
        mFrm := 0;
        case lbList.ItemIndex of
            0:
                begin
                    nF := TfrmReference.Create(Self, [riMotor, riSoundProof, riElec, riBuckle, riIMSMem, riIMSMem]);
                    with nF as TfrmReference do
                    begin
                        Parent := pnlDock;
                        BorderStyle := bsNone;
                        Align := alClient;
                        mFrm := Handle;

                        OnUserChange := OnUserEditChanged;
                        sbtnsave.Visible := true;
                        sbtnsave.Enabled := false;

                        Show;
                    end;
                end;
            1:
                begin
                    nF := TfrmLanSetup.Create(Self);
                    with nF as TfrmLanSetup do
                    begin
                        Parent := pnlDock;
                        BorderStyle := bsNone;
                        Align := alClient;
                        mFrm := Handle;

                        OnUserChange := OnUserEditChanged;
                        sbtnsave.Visible := true;
                        sbtnsave.Enabled := false;

                        Show;
                    end;
                end;
            2:
            begin
                nF:= TfrmPowerSuppy.Create(Self, [gTsPwrWorks[0].Name]);
                with nF as TfrmPowerSuppy do
                begin
                    Parent := pnlDock;
                    BorderStyle := bsNone;
                    Align := alClient;
                    mFrm := Handle ;

                    //OnUserChange := OnUserEditChanged ;
                    //sbtnsave.Visible := true ;
                    //sbtnsave.Enabled := false ;

                    Show ;
                end ;
            end ;
            3:
                begin
                    nF := TfrmADChecker.Create(Self,
                        procedure(SatationIdx: Integer; var AD: TBaseAD; var CT: TBaseCounter)
                        begin
                            AD := gTsPwrWorks[SatationIdx].AD;
//                            CT := gTsPwrWorks[SatationIdx].CT
                        end
                    );
                    with nF as TfrmADChecker do
                    begin
                        Parent := pnlDock;
                        BorderStyle := bsNone;
                        Align := alClient;
                        mFrm := Handle;

                        Show;
                    end;
                end;
            4:
                begin
                    nF := TfrmDio.Create(Self, ftDIO);
                    with nF as TfrmDio do
                    begin
                        for i := 0 to MAX_ST_COUNT - 1 do
                            AddDIO(gTsPwrWorks[i].DIO, 0, _DIO_CH_COUNT div 2, _DIO_CH_COUNT, gTsPwrWorks[i].Name);

                        Parent := pnlDock;
                        BorderStyle := bsNone;
                        Align := alClient;
                        mFrm := Handle;

                        Show;
                    end;
                end;
            5:
                begin
                    nF := TfrmDio.Create(Self, ftLIO);
                    with nF as TfrmDio do
                    begin
                        for i := 0 to MAX_ST_COUNT - 1 do
                        begin
                            AddDIO(gLanDIO, i * (_LAN_IO_CH_COUNT div 2 div 2), _LAN_IO_CH_COUNT div 2, _LAN_IO_CH_COUNT div 2, gTsPwrWorks[i].Name);
                        end;
                        WDataReadFunc := gLanDIO.GetDataIoAsWord;
                        Parent := pnlDock;
                        BorderStyle := bsNone;
                        Align := alClient;
                        mFrm := Handle;

                        Show;
                    end;
                end;

        end;
        mLastIDx := lbList.ItemIndex;

    end;

end;

procedure TfrmUserRefer.HVCtrlChange(Sender: TObject);
begin

end;

procedure TfrmUserRefer.lbListDrawItem(Control: TWinControl; Index: Integer; Rect: TRect; State: TOwnerDrawState);
var
    bC: TColor;
    bkAlign, bkMode: integer;
    sTm: string;
begin                           //$00AAAAAA
    with Control as TListBox do
    begin
        bC := Canvas.Brush.Color;
        bkMode := GetBkColor(Canvas.Handle);
        bkAlign := GetTextAlign(Canvas.Handle);

        SetBkMode(Canvas.Handle, TRANSPARENT);
        SetTextAlign(Canvas.Handle, TA_CENTER + TA_TOP);

        Canvas.Font.Name := Font.Name;
        Canvas.Font.Height := Font.Height;

        sTm := Items.Strings[Index];

        //if (Index mod 2) = 0 then Canvas.Brush.Color := clGray
        //else                      Canvas.Brush.Color := clSilver ;
        if odSelected in State then
        begin
            Canvas.Pen.Color := clLime;
            Canvas.Brush.Color := clSilver;
        end
        else
        begin
            Canvas.Pen.Color := clSilver;
            Canvas.Brush.Color := clWhite;
        end;
        Canvas.FillRect(Rect);

        //Canvas.Pen.Color := clLime ;
        Canvas.Pen.Width := 2;
        Canvas.Brush.Style := bsClear;
        InflateRect(Rect, -1, -1);
        Canvas.Rectangle(Rect);

        //Canvas.Pen.Color := $00737373 ;

        Canvas.Font.Style := [fsBold];
        Canvas.TextOut(Rect.Left + (Rect.Right - Rect.Left) div 2, Rect.Top + (Rect.Bottom - Rect.Top) div 2 - Canvas.TextHeight('H') div 2, sTm);

        Canvas.Brush.Color := bC;
        SetTextAlign(Canvas.Handle, bkAlign);
        SetBkMode(Canvas.Handle, bkMode);
    end;
end;

procedure TfrmUserRefer.OnUserEditChanged(Sender: TObject; AStatus: integer);
begin
    if not sbtnsave.Visible then
        Exit;
    sbtnsave.Enabled := AStatus = 1;
end;

procedure TfrmUserRefer.pnlTitleMouseDown(Sender: TObject; Button: TMouseButton; Shift: TShiftState; X, Y: Integer);
begin
    ReleaseCapture();
    PostMessage(Handle, WM_NCLBUTTONDOWN, HTCAPTION, 0);
end;

procedure TfrmUserRefer.ReadMessage(var myMsg: TMessage);
begin
    SendToForm(mfrm, myMsg.WParam, myMsg.LParam);
end;

procedure TfrmUserRefer.sbtnCloseClick(Sender: TObject);
begin
    Close;
end;

procedure TfrmUserRefer.sbtnsaveClick(Sender: TObject);
begin
    SendToForm(mFrm, SYS_SAVE_DATA, 0);
end;

end.

