unit PowerSupplyUnit;
{$I myDefine.inc}
{
    ODA - POE Serise.
    Footer: LF(0x0A).

    전압
    -> VOLT <값>
    <- VOLT?

    전류
    -> CURR <값>
    <- CURR?

    측정: 파워서플라이의 ReadBack 전압 및 전류를 측정.
    <- MEAS:VOLT? : 응답 "30.2"
    <- MEAS:CURR? : 응답 "2.99"

    시스템명령.
    <- OUTP on/off : 출력제어.
    <- OUTP? : 현재 출력제어상태 0 = 차단, 1 = 허용.

    기본동작.
    - 현재값 계속 모니터링 -> 연결상태 및 통신에러 관리.
    - 상태변경은 외부에서 한다.
    - 초기에 반드시 1회는 모든 상태를 모니터링 해야 한다.
    - 세팅은 별도 플래그를 이용하여 통신 송/수신이 중첩되지 않도록 한다.
    - 우선순위 POWER OFF > SET VOLT > SET CURR > POWER ON.
}

interface

uses
    Windows, Messages, SysUtils, Classes, ComUnit, DataUnit, SysEnv;

const
    _ER_DC_NONE = 0;
    _ER_DC_OPEN = 1;
    _ER_DC_RESPONSE = 2;
    _ER_DC_WRITE = 3;
    _ER_DC_SETTING = 4;

type
    TDcPower = class
    private
        mTag, mProc, msubProc: integer;
        mDevCom: TDevCom;
        mVolt: double;     // 읽은 volt
        mCurr: double;     // 읽은 current
        mOutPower: boolean;

        mSetVolt: double;  // 마지막으로 전송한 volt
        mSetCurr: double;  // 마지막으로 전송한 current
        mSetPower: boolean;

        mLogHandle: HWND;
        mrcvBuf: AnsiString;

        mLogHead: string;
        mTmpTime: double;
        mRepeat: integer;
        mSetCount: integer;

        mLstError: integer;
        mComTimes: double;
{$IFDEF USE_PWS_CURR}
        mMeasCurr: double;        // 측정된 전류값
        mMeasCurrTime: double;    // 마지막 측정 시간
{$ENDIF}

        procedure SetLogHandle(const aHandle: HWND);
        procedure SetUsrLog(const szFmt: string; const Args: array of const; IsFile: boolean = false);

        procedure Initial();
        procedure WorkProcess(Sender: TObject);

        function SendData(IsWrite: boolean = false): boolean;
        function ReadData(): boolean;

        procedure SaveEnv;
        procedure LoadEnv;

        function GetSupplyOutVolt(): double;
    protected
    public
        constructor Create(const ADevCom: TDevCom);
        destructor Destroy; override;

        procedure Start;
        procedure Stop;
        function SendToUnit(const Value: string): boolean;

        procedure SetVolt(const Value: double; IsWrite: boolean = false);
        procedure SetCurr(const Value: double; IsWrite: boolean = false);

        procedure PowerON(IsWrite: boolean = false);
        procedure PowerOFF(IsWrite: boolean = false);

        function Clear: boolean;

        function ReqVolt(): boolean;
        function ReqCurr(): boolean;
        function ReqOutPower(): boolean;
        function Read(): string;
        function IsRun(): boolean;
        function GetLstError(): integer;

        function GetOutVolt(): double;
        function GetOutCurr(): double;

        {$IFDEF USE_PWS_CURR}
        function ReqMeasCurr(): boolean;        // <- 이 줄 추가
{$ENDIF}
{$IFDEF USE_PWS_CURR}
        function GetMeasCurr(): double;         // <- 이 줄 추가
        function IsNeedMeasCurr(): boolean;     // <- 이 줄 추가
{$ENDIF}

        function GetComStatus(): boolean;

        property LogHandle: HWND write SetLogHandle;
        property Volt: double read GetSupplyOutVolt; //mVolt ;
        property Curr: double read mCurr;
        property Power: boolean read mOutPower;
        property DevCom: TDevCom read mDevCom;
        property Tag: integer read mTag write mTag;
{$IFDEF USE_PWS_CURR}
        property MeasCurr: double read GetMeasCurr; // <- 이 줄 추가
{$ENDIF}
    end;

    TDcPowers = class
    private
        mIndex: integer;
        mReady: boolean;
        mItemCount: integer;
        mItems: array of TDcPower;

        function GetItem(Index: integer): TDcPower;
    public
        constructor Create(DevComOrds: array of TDevComORD);
        destructor Destroy; override;

        procedure Start;
        procedure Stop;
        function IsRun: boolean;
        procedure WorkProcess(Sender: TObject);

        property Items[Index: integer]: TDcPower read GetItem;
        property ItemCount: integer read mItemCount;
    end;

var
    gDcPower: TDcPowers;

implementation

uses
    Log, myUtils, RS232, IniFiles, LanIoUnit, LangTran;

const
    _ORD_POWER = 0;
    _ORD_VOLT = 1;
    _ORD_CURR = 2;
    {$IFDEF USE_PWS_CURR}
    _ORD_MEAS_CURR = 3;  // 추가
{$ENDIF}

    _COM_CHECK = 5000.0;
    _MEAS_CURR_INTERVAL = 300.0;  // 300ms 주기

{ TDcPower }

constructor TDcPower.Create(const ADevCom: TDevCom);
begin
    mLogHead := Format('%s(COM%d)', [GetDevComName(ADevCom.DevID), ADevCom.Port]);
    gLog.ToFiles('create', []);

    mProc := 0;
    msubProc := 0;
    mDevCom := ADevCom;
    mLogHandle := 0;

    mComTimes := 0;

{$IFDEF USE_PWS_CURR}
    mMeasCurr := 0.0;
    mMeasCurrTime := 0.0;
{$ENDIF}
end;

destructor TDcPower.Destroy;
begin
    //SaveEnv ;
    inherited;
    gLog.ToFiles('destroy', []);
end;

procedure TDcPower.LoadEnv;
var
    sTm: string;
    Ini: TIniFile;
begin
    sTm := Format('%s\PowerSupply.Ini', [GetUsrDir(udENV, Now())]);
    Ini := TIniFile.Create(sTm);
    try
        mSetVolt := Ini.ReadFloat('POWER ' + IntToStr(Tag), 'SET VOLT', 13.5);
        mSetCurr := Ini.ReadFloat('POWER ' + IntToStr(Tag), 'SET CURR', 8.0);
    finally
        Ini.Free;
    end;

    if not FileExists(sTm) then
        SaveEnv;
end;

procedure TDcPower.SaveEnv;
var
    sTm: string;
    Ini: TIniFile;
begin
    sTm := Format('%s\PowerSupply.Ini', [GetUsrDir(udENV, Now())]);
    Ini := TIniFile.Create(sTm);
    try
        Ini.WriteFloat('POWER ' + IntToStr(Tag), 'SET VOLT', mSetVolt);
        Ini.WriteFloat('POWER ' + IntToStr(Tag), 'SET CURR', mSetCurr);
    finally
        Ini.Free;
    end;
end;

procedure TDcPower.Initial;
begin
    mVolt := 0.0;
    mCurr := 0.0;
    mOutPower := false;
    mrcvBuf := '';
    mLstError := _ER_DC_NONE;
    mRepeat := 0;
    msubProc := 0;

    LoadEnv;

    if not mDevCom.IsOpen and not mDevCom.Open then
    begin
        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), Format('COM%d %s', [mDevCom.Port, _TR('통신포트 열기실패')]), _TR('통신포트설정 확인 하세요.'), umtError);
        mLstError := _ER_DC_OPEN;
    end;
{$IFDEF USE_PWS_CURR}
    mMeasCurr := 0.0;
    mMeasCurrTime := GetAccurateTime;
{$ENDIF}
end;

function TDcPower.GetLstError: integer;
begin
    Result := mLstError;
end;

function TDcPower.IsRun: boolean;
begin
    Result := mProc > 0;
end;

function TDcPower.Read: string;
var
    iT: integer;
    Buf: AnsiString;
begin
    Result := '';
    if Assigned(mDevCom) and not mDevCom.Lock and (mDevCom.GetInQue > 0) then
    begin
        mDevCom.Lock := true;

        SetLength(Buf, 64);
        iT := mDevCom.Read(Buf[1], Length(Buf) - 1);
        if iT > 0 then
        begin
            Buf := Copy(Buf, 1, iT);
            mrcvBuf := mrcvBuf + Buf;
            if gPwrDebugMode then
                SetUsrLog('rcvdata: %s', [Result], true);
        end;

        mDevCom.Lock := false;
        mComTimes := GetAccurateTime;
    end;
    Buf := '';
    if (Length(Trim(mrcvBuf)) <= 0) or (Pos(LF, mrcvBuf) <= 0) then
        Exit;

    Result := Trim(Copy(mrcvBuf, 1, Pos(LF, mrcvBuf) - 1));
    Delete(mrcvBuf, 1, Pos(LF, mrcvBuf));

    if gPwrDebugMode then
        SetUsrLog('rcvdata: %s', [Result], true);
end;

function TDcPower.ReadData(): boolean;
var
    sTm: string;
begin
    Result := false;
    sTm := Trim(Read());

    if sTm = '' then
        Exit
    else if Trim(sTm) = 'OK' then
    begin
        Result := true;
        Exit;
    end;

    case msubProc of
        _ORD_POWER:
            begin
                mOutPower := sTm = '1';

            end;
        _ORD_VOLT:
            begin
                mVolt := StrToFloatDef(sTm, 0);
            end;
{$IFDEF USE_PWS_CURR}
        _ORD_MEAS_CURR:
            begin
                mMeasCurr := StrToFloatDef(sTm, 0);
                mMeasCurrTime := GetAccurateTime;
                if gPwrDebugMode then
                    SetUsrLog('MEAS:CURR = %0.3f', [mMeasCurr], true);
            end;
{$ENDIF}
    else
        //_ORD_CURR
        mCurr := StrToFloatDef(sTm, 0);
    end;
    Result := true;
end;

// 새로운 함수 추가
{$IFDEF USE_PWS_CURR}
function TDcPower.ReqMeasCurr: boolean;
begin
    Result := SendToUnit('MEAS:CURR?');
end;

function TDcPower.GetMeasCurr: double;
begin
    Result := mMeasCurr;
end;

function TDcPower.IsNeedMeasCurr: boolean;
begin
    Result := (GetAccurateTime - mMeasCurrTime) >= _MEAS_CURR_INTERVAL;
end;
{$ENDIF}

function TDcPower.ReqCurr: boolean;
begin
    Result := SendToUnit('CURR?');
end;

function TDcPower.ReqOutPower: boolean;
begin
    Result := SendToUnit('OUTP?');
end;

function TDcPower.ReqVolt: boolean;
begin
    Result := SendToUnit('VOLT?');
end;

function TDcPower.SendData(IsWrite: boolean): boolean;
begin
    Result := true;
    case msubProc of
        _ORD_POWER:
            begin
                if not IsWrite then
                    Result := ReqOutPower()
                else if mSetPower then
                    PowerON(true)
                else
                    PowerOFF(true);
            end;
        _ORD_VOLT:
            begin
                if not IsWrite then
                    Result := ReqVolt()
                else
                    SetVolt(mSetVolt, true);
            end;
        _ORD_CURR:
            begin
                if not IsWrite then
                    Result := ReqCurr()
                else
                    SetCurr(mSetCurr, true);
            end;
{$IFDEF USE_PWS_CURR}
        _ORD_MEAS_CURR:
            begin
                Result := ReqMeasCurr();
            end;
{$ENDIF}
    else
        Result := false;
    end;
end;

function TDcPower.SendToUnit(const Value: string): boolean;
var
    sTm: ShortString;
begin
    mrcvBuf := '';
    Result := false;
    if not mDevCom.IsOpen then
    begin
        SetUsrLog('not open', []);
        Exit;
    end;

    sTm := ShortString(Value) + LF;
    Result := mDevCom.Write(sTm[1], Length(sTm));
    if Result and gPwrDebugMode then
        SetUsrLog('snd: %s', [sTm]);
end;

procedure TDcPower.SetCurr(const Value: double; IsWrite: boolean);
begin

{$IFNDEF VIRTUALIO}
    if ((Value >= 50) or (Value < 0)) or not mDevCom.IsOpen then
    begin
        SetUsrLog('Input check(0 <= A < 50)', []);
        Exit;
    end;

    if IsWrite then
    begin
        SendToUnit('CURR ' + Format('%0.2f', [mSetCurr]));
        Exit;
    end;
{$ELSE}
    mCurr := Value;
{$ENDIF}

    mSetCurr := Value;
    SaveEnv;
end;

function TDcPower.Clear: boolean;
begin
    Result := SendToUnit('*CLS');
end;

procedure TDcPower.SetLogHandle(const aHandle: HWND);
begin
    mLogHandle := aHandle;
end;

procedure TDcPower.SetUsrLog(const szFmt: string; const Args: array of const; IsFile: boolean);
begin
    if not IsFile then
        gLog.Panel(mLogHead + ' ' + szFmt, Args)
    else
        gLog.ToFiles(mLogHead + ' ' + szFmt, Args);

    if mLogHandle <= 32 then
        Exit;
    ToPanel(mLogHandle, mLogHead + ' ' + szFmt, Args);
end;

procedure TDcPower.SetVolt(const Value: double; IsWrite: boolean);
begin
{$IFNDEF VIRTUALIO}
    if (Value < 0) or not mDevCom.IsOpen then
    begin
        SetUsrLog('Input check(V >= 0)', []);
        Exit;
    end;

    if IsWrite then
    begin
        SendToUnit('VOLT ' + Format('%0.1f', [mSetVolt]));
        Exit;
    end;

{$ELSE}
    mVolt := Value;
{$ENDIF}

    mSetVolt := Value;
    SaveEnv;
end;

procedure TDcPower.Start;
begin
    if IsRun then
        Exit;
    mProc := 8;
    Initial();
    //mSetPower:= true ;
    PowerOn();
    mTmpTime := GetAccurateTime;
    SetUsrLog('start', []);
end;

procedure TDcPower.Stop;
begin
    if not IsRun then
        Exit;
    mProc := 0;
    PowerOFF(true);
    mDevCom.Close;
    SetUsrLog('stop', []);
end;

procedure TDcPower.PowerON(IsWrite: boolean);
begin
    if not mDevCom.IsOpen then
    begin
        SetUsrLog('not ready', []);
        Exit;
    end;

    if IsWrite then
    begin
        SendToUnit('OUTP on');
        Exit;
    end;

    mSetPower := true;
end;

procedure TDcPower.PowerOFF(IsWrite: boolean);
begin
    if not mDevCom.IsOpen then
    begin
        SetUsrLog('not ready', []);
        Exit;
    end;

    if IsWrite then
    begin
        SendToUnit('OUTP off');
        Exit;
    end;

    mSetPower := false;
end;

const
    _ER_PROC = 7;

procedure TDcPower.WorkProcess(Sender: TObject);
begin
    ;
    case mProc of
        0:
            ;
        1:
            begin
                if not mDevCom.IsOpen and not mDevCom.Open then
                begin
                    if mLstError <> _ER_DC_OPEN then
                    begin
                        mLstError := _ER_DC_OPEN;
                        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), Format('COM%d %s', [mDevCom.Port, _TR('통신포트 열기실패')]), _TR('통신포트설정 확인 하세요.'), umtError);
                    end;
                    mProc := _ER_PROC;
                    Exit;
                end;
         //   gLog.Panel('PROC = %d, %s',[mProc, GetDevComName(mDevCom.DevID)]);
                mSetCount := 0;
                mRepeat := 0;
                msubProc := 0;
                Inc(mProc);
            end;
        2:
            begin
                if not SendData() then
                begin
                    if mLstError <> _ER_DC_WRITE then
                    begin
                        mLstError := _ER_DC_WRITE;
                        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), _TR('데이타 전송 실패!'), _TR('통신포트설정 확인 하세요.'), umtError);
                    end;
                    mProc := _ER_PROC;

                    Exit;
                end;

                Inc(mRepeat);
                Inc(mProc);
                mTmpTime := GetAccurateTime;
            end;
        3:
            begin
                if ReadData() then
                begin
                    mRepeat := 0;
                    mLstError := _ER_DC_NONE;
                    mTmpTime := GetAccurateTime;

                    Inc(mProc);
                    case msubProc of
                        _ORD_POWER:
                            begin
                                if mSetPower <> mOutPower then
                                begin

                                    Inc(mProc);

                                end
                                else
                                    mSetCount := 0;
                            end;
                        _ORD_VOLT:
                            begin
                                if mOutPower and (mSetVolt <> mVolt) then //2014-06-20 POWER ON 상태에서만
                                begin

                                    Inc(mProc);

                                end
                                else
                                    mSetCount := 0;
                            end
                    else
                        if mOutPower and (mSetCurr <> mCurr) then //2014-06-20
                        begin

                            Inc(mProc);

                        end
                        else
                            mSetCount := 0;
                    end;
                end
                else if (GetAccurateTime - mTmpTime) >= (gsysEnv.rComm.rWaitResPwrSply * 1000.0) then
                begin
                    if mRepeat > 3 then
                    begin
                        if mLstError <> _ER_DC_RESPONSE then
                        begin
                            mVolt := 0;
                            mCurr := 0;
                            mOutPower := false;
                            mLstError := _ER_DC_RESPONSE;
                        //gLog.Panel('PROC = %d, %s, SetErrorTxt',[mProc, GetDevComName(mDevCom.DevID)]);
                            SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), _TR('응답이 없습니다.!'), _TR('파워서플라이 전원 및 케이블 연결, 통신포트설정을 확인 하세요.'), umtError);
                        end;

                        mProc := _ER_PROC;
                        Exit;
                    end
                    else
                    begin

                        mProc := 2;
                    end;
                end;
            end;
        4:
            begin
                if ((GetAccurateTime - mTmpTime) < 1000.0) then
                    Exit;
{$IFDEF USE_PWS_CURR}
    // MEAS:CURR? 요청이 필요한지 확인
                if IsNeedMeasCurr and mOutPower then  // 전원이 켜져있을 때만
                begin
                    msubProc := _ORD_MEAS_CURR;
                    mProc := 2;
                    Exit;
                end;
{$ENDIF}

{$IFDEF USE_PWS_CURR}
                msubProc := msubProc mod 4;  // 0,1,2,3 순환
{$ELSE}
                msubProc := msubProc mod 3;  // 기존: 0,1,2 순환
{$ENDIF}

                msubProc := msubProc mod 3;

                if not GetComStatus then
                    msubProc := 0; //통신응답이 없을 경우 진행안함

                if msubProc = 0 then
                    mProc := 1
                else
                    mProc := 2;
            end;
        5:
            begin
                if mSetCount > 3 then
                begin
                    if mLstError <> _ER_DC_SETTING then
                    begin
                        mLstError := _ER_DC_SETTING;
                        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), _TR('설정을 할 없습니다.!'), _TR('파워서플라이 전원을 리셋후 검사 프로그램을 다시 시작해주십시요'), umtError);
                    end;
                    mProc := _ER_PROC;

                    Exit;
                end;

                if not SendData(true) then
                begin
                    if mLstError <> _ER_DC_WRITE then
                    begin
                        mLstError := _ER_DC_WRITE;
                        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), _TR('데이타 전송 실패!'), _TR('통신포트설정 확인 하세요.'), umtError);
                    end;
                    mProc := _ER_PROC;

                    Exit;
                end;

                Inc(mSetCount);
                Inc(mProc);
                mTmpTime := GetAccurateTime;

            end;
        6:
            begin
            //gLog.Panel('PROC = %d, %s',[mProc, GetDevComName(mDevCom.DevID)]);
            {
            if msubProc = _ORD_POWER then
            begin
                if ReadData() then
                begin
                    mRepeat:= 0 ;
                    mLstError:= _ER_DC_NONE ;
                    mTmpTime := GetAccurateTime ;
                    mProc:= 2 ;
                end
                else
                if (GetAccurateTime - mTmpTime) >= (gsysEnv.rPwrWaitTime * 1000.0) then
                begin
                    mProc:= 5 ;
                end ;
            end
            else
            }
                if (GetAccurateTime - mTmpTime) >= 200 then
                begin

                    mRepeat := 0;

                    mLstError := _ER_DC_NONE;

                    mTmpTime := GetAccurateTime;

                    mProc := 2;

                end;
            end;
        7:
            Inc(mProc);
        8:
            begin
                if (GetaccurateTime - mTmpTime) < 5000.0 then
                    Exit;
            //gLog.Panel('PROC = %d, %s',[mProc, GetDevComName(mDevCom.DevID)]);
                mProc := 1;
            end;
        9:
            ;
    else
        SetErrorTxt(Format('%s Power Supply', [GetDevComName(mDevCom.DevID)]), _TR('프로세서 오류.'), _TR('오류 사항을 메모한 후 프로그램을 재가동하세요.'), umtError);
        SetUsrLog('%s %d', [_TR('모듈프로세서 오류'), mProc]);
        //gLog.Panel('PROC = %d, %s',[mProc, GetDevComName(mDevCom.DevID)]);
        mProc := 9;
    end;
end;

function TDcPower.GetOutCurr: double;
begin
    Result := mSetCurr;
end;

function TDcPower.GetOutVolt: double;
begin
    Result := mSetVolt;
end;

function TDcPower.GetSupplyOutVolt: double;
begin
{$IFDEF VIRTUALIO}
    Result := mVolt;
{$ELSE}
    if mOutPower then
        Result := mVolt
    else
        Result := 0.0;
{$ENDIF}
end;

function TDcPower.GetComStatus: boolean;
begin
    Result := (GetAccurateTime - mComTimes) <= _COM_CHECK;
end;

{ TDcPowers }

constructor TDcPowers.Create(DevComOrds: array of TDevComORD);
var
    i, ItemCount: integer;
begin
    gLog.ToFiles('DC POWER CREATE', []);

    ItemCount := Length(DevComOrds);

    SetLength(mItems, ItemCount);

    for i := 0 to ItemCount - 1 do
    begin
        mItems[i] := TDcPower.Create(gDevComs.GetDevCom(DevComOrds[i]));
    end;

    mReady := false;
    mItemCount := 1;
end;

destructor TDcPowers.Destroy;
var
    i: integer;
begin
    Stop;

    for i := 0 to Length(mItems) - 1 do
    begin
        mItems[i].Free;
    end;

    mItems := nil;
    inherited;
    gLog.ToFiles('DC POWER DESTROY', []);
end;

function TDcPowers.GetItem(Index: integer): TDcPower;
begin
    Result := mItems[Index];
end;

function TDcPowers.IsRun: boolean;
var
    i: integer;
begin
    for i := 0 to Length(mItems) - 1 do
        if mItems[i].IsRun then
            Exit(true);

    Result := false;
end;

procedure TDcPowers.Start;
var
    i: integer;
begin
    if mReady then
        Exit;
    mReady := true;
    mIndex := 0;

    for i := 0 to Length(mItems) - 1 do
        mItems[i].Start;

    gLog.ToFiles('DC POWER START', []);
end;

procedure TDcPowers.Stop;
var
    i: integer;
begin
    if not mReady then
        Exit;
    mReady := false;

    for i := 0 to Length(mItems) - 1 do
        mItems[i].Stop;

    gLog.ToFiles('DC POWER STOP', []);
end;

procedure TDcPowers.WorkProcess(Sender: TObject);
var
    i: integer;
begin
    if not mReady then
        Exit;

    for i := 0 to Length(mItems) - 1 do
        mItems[i].WorkProcess(Sender);



   { Inc(mIndex);
    mIndex:= mIndex mod Length(mItems) ;

    //-- SJD 이부분 mindex 0으로 고정시 문제없습니다.

    mItems[0].WorkProcess(Sender);   }

end;

end.

