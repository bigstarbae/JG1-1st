unit SOEMLIB;
{**************************************************************************}
{                                                                          }
{    This C DLL header file first (automatic) conversion generated by:     }
{    HeadConv 4.0 (c) 2000 by Bob Swart (aka Dr.Bob - www.drbob42.com)     }
{      Final Delphi-Jedi (Darth) command-line units edition                }
{                                                                          }
{    Generated Date: 2024-02-05                                            }
{    Generated Time: ¿ÀÀü 10:24:36                                              }
{                                                                          }
{**************************************************************************}

interface

uses
    SOEMParams,
{$IFDEF WIN32}
    Windows;
//{$ELSE}
//   Wintypes, WinProcs;
{$ENDIF}

var
    SOEM_open: function(var Handle: Pointer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};   // O

    SOEM_close: function(var Handle: Pointer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getHandle: procedure(var Handle: Pointer); cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_config: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getSlaveCount: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_updateState: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getState: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_stateCheck: function(slave: Integer; reqstate: word; timeout: Integer): Word; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_getALStatusCode: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_getALStatusDesc: procedure(slave: Integer; desc: PChar); cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_changeState: procedure(slave: Integer; state: Word); cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getName: procedure(slave: Integer; name: PChar); cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getId: procedure(slave: Integer; id: PLongInt); cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // X

    SOEM_transferPDO: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getInputPDO: function(slave: Integer; offset: Integer): BYTE; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getInputAsUint16PDO: function(slave: Integer; offset: Integer): Word; cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_getInputBufferPDO: function(slave: Integer; offset: Integer; read: Pointer; datasize: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_setOutputPDO: procedure(slave: Integer; offset: Integer; write: BYTE); cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_setOutputAsUint16PDO: procedure(slave: Integer; offset: Integer; write: Word); cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_setOutPutAsBufferPDO: procedure(slave: Integer; offset: Integer; write: Pointer; datasize: Integer); cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_SDOwrite8: function(slave: Integer; Index: Word; SubIndex: Byte; CA: Boolean; dataSize: Integer; write: PByte): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_SDOwrite16: function(slave: Integer; Index: Word; SubIndex: Byte; CA: Boolean; dataSize: Integer; write: PWord): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_SDOwrite32: function(slave: Integer; Index: Word; SubIndex: Byte; CA: Boolean; dataSize: Integer; write: PDWord): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_SDOread: function(slave: Integer; Index: Word; SubIndex: Byte; CA: Boolean; dataSize: PInteger; read: Pointer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    SOEM_findAdapters: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_getAdapterName: procedure(index: Integer; name: PChar); cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_getAdapterDesc: procedure(index: Integer; desc: PChar); cdecl  {$IFDEF WIN32} stdcall {$ENDIF}; // O

    SOEM_getSlave: function(slave: Integer): pec_slave; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};  // O

    SOEM_getSlaveList: function: pec_slavet; cdecl {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_getGroup: function(group: Integer): pec_group; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_getGroupList: function: pec_groupt; cdecl {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_getContext: function: pecx_context; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_readPDOmap: function(slave: Integer; Osize, Isize: PDWORD): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_readODlist: function(slave: Integer; ODList: pec_ODlist): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_readODdescription: function(item: Integer; ODList: pec_ODlist): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_readOEsingle: function(item: Integer; SubIndex: Byte; ODList: pec_ODlist; OEList: pec_OElist): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_enabledSM: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_configFMMu: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_setEEPROM2pdi: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_FOEread: function(slave: Integer; filename: PChar; password: DWORD; psize: PInteger; pfile: Pointer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_FOEwrite: function(slave: Integer; filename: PChar; password: DWORD; psize: Integer; pfile: Pointer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_Recovery: function(slave: Integer): Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};

    SOEM_lostCheck: function: Integer; cdecl  {$IFDEF WIN32} stdcall {$ENDIF};
    {///--------------------------------------------------------------------- }

var
    DLLLoaded:Boolean { is DLL (dynamically) loaded already? }
    {$IFDEF WIN32}                  = False; {$ENDIF}

implementation

var
    SaveExit: pointer;
    DLLHandle: THandle;
{$IFNDEF MSDOS}
    ErrorMode: Integer;
{$ENDIF}

procedure NewExit; far;
begin
    ExitProc := SaveExit;
    FreeLibrary(DLLHandle)
end {NewExit};

procedure LoadDLL;
begin
    if DLLLoaded then
        Exit;
{$IFNDEF MSDOS}
    ErrorMode := SetErrorMode($8000{SEM_NoOpenFileErrorBox});
{$ENDIF}
    DLLHandle := LoadLibrary('soemlib.dll');
    if DLLHandle >= 32 then
    begin
        DLLLoaded := True;
        SaveExit := ExitProc;
        ExitProc := @NewExit;

        @SOEM_open := GetProcAddress(DLLHandle, 'SOEM_open');
  {$IFDEF WIN32}
        Assert(@SOEM_open <> nil);
  {$ENDIF}
        @SOEM_close := GetProcAddress(DLLHandle, 'SOEM_close');
  {$IFDEF WIN32}
        Assert(@SOEM_close <> nil);
  {$ENDIF}
        @SOEM_getHandle := GetProcAddress(DLLHandle, 'SOEM_getHandle');
  {$IFDEF WIN32}
        Assert(@SOEM_getHandle <> nil);
  {$ENDIF}
        @SOEM_config := GetProcAddress(DLLHandle, 'SOEM_config');
  {$IFDEF WIN32}
        Assert(@SOEM_config <> nil);
  {$ENDIF}
        @SOEM_getSlaveCount := GetProcAddress(DLLHandle, 'SOEM_getSlaveCount');
  {$IFDEF WIN32}
        Assert(@SOEM_getSlaveCount <> nil);
  {$ENDIF}
        @SOEM_updateState := GetProcAddress(DLLHandle, 'SOEM_updateState');
  {$IFDEF WIN32}
        Assert(@SOEM_updateState <> nil);
  {$ENDIF}
        @SOEM_getState := GetProcAddress(DLLHandle, 'SOEM_getState');
  {$IFDEF WIN32}
        Assert(@SOEM_getState <> nil);
  {$ENDIF}
        @SOEM_getALStatusCode := GetProcAddress(DLLHandle, 'SOEM_getALStatusCode');
  {$IFDEF WIN32}
        Assert(@SOEM_getALStatusCode <> nil);
  {$ENDIF}
        @SOEM_getALStatusDesc := GetProcAddress(DLLHandle, 'SOEM_getALStatusDesc');
  {$IFDEF WIN32}
        Assert(@SOEM_getALStatusDesc <> nil);
  {$ENDIF}
        @SOEM_changeState := GetProcAddress(DLLHandle, 'SOEM_changeState');
  {$IFDEF WIN32}
        Assert(@SOEM_changeState <> nil);
  {$ENDIF}
        @SOEM_statecheck := GetProcAddress(DLLHandle, 'SOEM_stateCheck');
  {$IFDEF WIN32}
        Assert(@SOEM_statecheck <> nil);
  {$ENDIF}
        @SOEM_getName := GetProcAddress(DLLHandle, 'SOEM_getName');
  {$IFDEF WIN32}
        Assert(@SOEM_getName <> nil);
  {$ENDIF}
        @SOEM_getId := GetProcAddress(DLLHandle, 'SOEM_getId');
  {$IFDEF WIN32}
        Assert(@SOEM_getId <> nil);
  {$ENDIF}
        @SOEM_transferPDO := GetProcAddress(DLLHandle, 'SOEM_transferPDO');
  {$IFDEF WIN32}
        Assert(@SOEM_transferPDO <> nil);
  {$ENDIF}
        @SOEM_getInputPDO := GetProcAddress(DLLHandle, 'SOEM_getInputPDO');
  {$IFDEF WIN32}
        Assert(@SOEM_getInputPDO <> nil);
  {$ENDIF}
        @SOEM_getInputAsUint16PDO := GetProcAddress(DLLHandle, 'SOEM_getInputAsUint16PDO');
  {$IFDEF WIN32}
        Assert(@SOEM_getInputAsUint16PDO <> nil);
  {$ENDIF}
        @SOEM_getInputBufferPDO := GetProcAddress(DLLHandle, 'SOEM_getInputBufferPDO');
  {$IFDEF WIN32}
        Assert(@SOEM_getInputBufferPDO <> nil);
  {$ENDIF}
        @SOEM_setOutputPDO := GetProcAddress(DLLHandle, 'SOEM_setOutputPDO');
  {$IFDEF WIN32}
        Assert(@SOEM_setOutputPDO <> nil);
  {$ENDIF}
        @SOEM_setOutputAsUint16PDO := GetProcAddress(DLLHandle, 'SOEM_setOutputAsUint16PDO');
  {$IFDEF WIN32}
        Assert(@SOEM_setOutputAsUint16PDO <> nil);
  {$ENDIF}
        @SOEM_setOutPutAsBufferPDO := GetProcAddress(DLLHandle, 'SOEM_setOutPutAsBufferPDO');
  {$IFDEF WIN32}
        Assert(@SOEM_setOutPutAsBufferPDO <> nil);
  {$ENDIF}
        @SOEM_SDOwrite8 := GetProcAddress(DLLHandle, 'SOEM_SDOwrite8');
  {$IFDEF WIN32}
        Assert(@SOEM_SDOwrite8 <> nil);
  {$ENDIF}
        @SOEM_SDOwrite16 := GetProcAddress(DLLHandle, 'SOEM_SDOwrite16');
  {$IFDEF WIN32}
        Assert(@SOEM_SDOwrite16 <> nil);
  {$ENDIF}
        @SOEM_SDOwrite32 := GetProcAddress(DLLHandle, 'SOEM_SDOwrite32');
  {$IFDEF WIN32}
        Assert(@SOEM_SDOwrite32 <> nil);
  {$ENDIF}
        @SOEM_SDOread := GetProcAddress(DLLHandle, 'SOEM_SDOread');
  {$IFDEF WIN32}
        Assert(@SOEM_SDOread <> nil);
  {$ENDIF}
        @SOEM_findAdapters := GetProcAddress(DLLHandle, 'SOEM_findAdapters');
  {$IFDEF WIN32}
        Assert(@SOEM_findAdapters <> nil);
  {$ENDIF}
        @SOEM_getAdapterName := GetProcAddress(DLLHandle, 'SOEM_getAdapterName');
  {$IFDEF WIN32}
        Assert(@SOEM_getAdapterName <> nil);
  {$ENDIF}
        @SOEM_getAdapterDesc := GetProcAddress(DLLHandle, 'SOEM_getAdapterDesc');
  {$IFDEF WIN32}
        Assert(@SOEM_getAdapterDesc <> nil);
  {$ENDIF}
        @SOEM_getSlave := GetProcAddress(DLLHandle, 'SOEM_getSlave');
  {$IFDEF WIN32}
        Assert(@SOEM_getSlave <> nil);
  {$ENDIF}
        @SOEM_getSlaveList := GetProcAddress(DLLHandle, 'SOEM_getSlaveList');
  {$IFDEF WIN32}
        Assert(@SOEM_getSlaveList <> nil);
  {$ENDIF}
        @SOEM_getGroup := GetProcAddress(DLLHandle, 'SOEM_getGroup');
  {$IFDEF WIN32}
        Assert(@SOEM_getGroup <> nil);
  {$ENDIF}
        @SOEM_getGroupList := GetProcAddress(DLLHandle, 'SOEM_getGroupList');
  {$IFDEF WIN32}
        Assert(@SOEM_getGroupList <> nil);
  {$ENDIF}
        @SOEM_getContext := GetProcAddress(DLLHandle, 'SOEM_getContext');
  {$IFDEF WIN32}
        Assert(@SOEM_getContext <> nil);
  {$ENDIF}
        @SOEM_readPDOmap := GetProcAddress(DLLHandle, 'SOEM_readPDOmap');
  {$IFDEF WIN32}
        Assert(@SOEM_readPDOmap <> nil);
  {$ENDIF}
        @SOEM_readODlist := GetProcAddress(DLLHandle, 'SOEM_readODlist');
  {$IFDEF WIN32}
        Assert(@SOEM_readODlist <> nil);
  {$ENDIF}
        @SOEM_readODdescription := GetProcAddress(DLLHandle, 'SOEM_readODdescription');
  {$IFDEF WIN32}
        Assert(@SOEM_readODdescription <> nil);
  {$ENDIF}
        @SOEM_readOEsingle := GetProcAddress(DLLHandle, 'SOEM_readOEsingle');
  {$IFDEF WIN32}
        Assert(@SOEM_readOEsingle <> nil);
  {$ENDIF}
        @SOEM_enabledSM := GetProcAddress(DLLHandle, 'SOEM_enabledSM');
  {$IFDEF WIN32}
        Assert(@SOEM_enabledSM <> nil);
  {$ENDIF}
        @SOEM_configFMMu := GetProcAddress(DLLHandle, 'SOEM_configFMMu');
  {$IFDEF WIN32}
        Assert(@SOEM_configFMMu <> nil);
  {$ENDIF}
        @SOEM_setEEPROM2pdi := GetProcAddress(DLLHandle, 'SOEM_setEEPROM2pdi');
  {$IFDEF WIN32}
        Assert(@SOEM_setEEPROM2pdi <> nil);
  {$ENDIF}
        @SOEM_FOEread := GetProcAddress(DLLHandle, 'SOEM_FOEread');
  {$IFDEF WIN32}
        Assert(@SOEM_FOEread <> nil);
  {$ENDIF}
        @SOEM_FOEwrite := GetProcAddress(DLLHandle, 'SOEM_FOEwrite');
  {$IFDEF WIN32}
        Assert(@SOEM_FOEwrite <> nil);
  {$ENDIF}
        @SOEM_Recovery := GetProcAddress(DLLHandle, 'SOEM_Recovery');
  {$IFDEF WIN32}
        Assert(@SOEM_Recovery <> nil);
  {$ENDIF}
        @SOEM_lostCheck := GetProcAddress(DLLHandle, 'SOEM_lostCheck');
  {$IFDEF WIN32}
        Assert(@SOEM_lostCheck <> nil);
  {$ENDIF}
    end
    else
    begin
        DLLLoaded := False;
    { Error: SOEMLIB.DLL could not be loaded !! }
    end;
{$IFNDEF MSDOS}
    SetErrorMode(ErrorMode)
{$ENDIF}
end {LoadDLL};

begin
    LoadDLL;

end.

